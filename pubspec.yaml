# lib/pubspec.yaml
name: grubtap
description: A new Flutter project for role-based user management with Supabase.

# The following line prevents the package from being accidentally published to
# pub.dev using `flutter pub publish`. This is preferred for private packages.
publish_to: 'none' # Remove this line if you wish to publish to pub.dev

# The following defines the version and build number for your application.
# A version number is three numbers separated by dots, like 1.2.43
# followed by an optional build number separated by a +.
# Both the version and the builder number may be overridden in flutter
# build by specifying --build-name and --build-number, respectively.
# In Android, build-name is used as versionName while build-number used as versionCode.
# Read more about Android versioning at https://developer.android.com/studio/publish/versioning
# In iOS, build-name is used as CFBundleShortVersionString while build-number is used as CFBundleVersion.
# Read more about iOS versioning at
# https://developer.apple.com/library/archive/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html
# In Windows, build-name is used as the major, minor, and patch parts
# of the product and file versions while build-number is used as the build suffix.
version: 1.0.0+1

environment:
  sdk: '>=3.3.1 <4.0.0' # Using a typical SDK constraint range

# Dependencies specify other packages that your package needs in order to work.
# To automatically upgrade your package dependencies to the latest versions
# consider running `flutter pub upgrade --major-versions`. Alternatively,
# dependencies can be manually updated by changing the version numbers below to
# the latest version available on pub.dev. To see which dependencies have newer
# versions available, run `flutter pub outdated`.
dependencies:
  flutter:
    sdk: flutter

  # Core UI and utility packages
  cupertino_icons: ^1.0.8 # Usually stable, verify if a newer version is needed

  # Supabase for backend, auth, and database
  supabase_flutter: ^2.10.0 # Let's stick with this one as ^2.10.0 had issues. Check `flutter pub outdated` later.
  app_links: ^3.5.0
  #uni_links: ^0.5.1
  # State management
  provider: ^6.1.2 # Check pub.dev for latest, e.g., ^6.1.x

  # Image handling
  image_picker: ^1.1.2 # Check pub.dev for latest, e.g., ^1.1.x
  cached_network_image: ^3.3.1 # Usually stable

  # Filesystem and local storage
  path_provider: ^2.1.3 # Check pub.dev for latest, e.g., ^2.1.x
  shared_preferences: ^2.2.3 # Check pub.dev for latest, e.g., ^2.2.x

  # Unique ID generation
  uuid: ^4.4.0 # Check pub.dev for latest, e.g., ^4.4.x

  # Formatting and internationalization
  intl: ^0.19.0 # Check pub.dev for latest, e.g., ^0.19.x or ^0.20.x

  # UI Enhancements & Utilities
  flutter_screenutil: ^5.9.3 # Check pub.dev for latest
  flutter_spinkit: ^5.2.1 # Usually stable
  email_validator: ^2.1.17 # Standard pub.dev version, use this unless ^3.0.0 is a specific fork

  # Authentication
  sign_in_with_apple: ^6.1.1 # Check pub.dev for latest, e.g., ^6.1.x or higher if compatible

dev_dependencies:
  flutter_test:
    sdk: flutter

  flutter_lints: ^4.0.0 # Or ^3.0.0, check current Flutter recommendations. ^4.x.x is newer.

  # Upgrading flutter_launcher_icons to a more recent version
  # This often helps with platform configuration issues.
  flutter_launcher_icons: ^0.14.0 # Or check pub.dev for the absolute latest like ^0.14.x

# For information on the generic Dart part of this file, see the
# following page: https://dart.dev/tools/pub/pubspec

# The following section is specific to Flutter packages.
flutter:

  # The following line ensures that the Material Icons font is
  # included with your application, so that you can use the icons in
  # the material Icons class.
  uses-material-design: true

  # To add assets to your application, add an assets section, like this:
  assets:
    # Make sure this exact file exists at project_root/assets/images/app_icon.png
    # (This is used by flutter_launcher_icons if image_path points here)
    - assets/images/app_icon.png
    # - assets/images/my_background.jpg # Keep if you have this specific file
    # - assets/images/default_avatar.png # Keep if you have this specific file
    # To include all assets in a folder, list the folder name ending with a /
    - assets/images/   # Ensure this folder exists: project_root/assets/images/
    - assets/icons/    # Ensure this folder exists: project_root/assets/icons/
    # Example:
    #   - images/a_dot_burr.jpeg
    #   - images/a_dot_ham.jpeg

  # An image asset can refer to one or more resolution-specific "variants", see
  # https://flutter.dev/to/resolution-aware-images

  # For details regarding adding assets from package dependencies, see
  # https://flutter.dev/to/asset-from-package

  # To add custom fonts to your application, add a fonts section here,
  # in this "flutter" section. Each entry in this list should have a
  # "family" key with the font family name, and a "fonts" key with a
  # list giving the asset and other descriptors for the font. For
  # example:
  # fonts:
  #   - family: Schyler
  #     fonts:
  #       - asset: fonts/Schyler-Regular.ttf
  #       - asset: fonts/Schyler-Italic.ttf
  #         style: italic
  #   - family: Trajan Pro
  #     fonts:
  #       - asset: fonts/TrajanPro.ttf
  #       - asset: fonts/TrajanPro_Bold.ttf
  #         weight: 700
  #
  # For details regarding fonts from package dependencies,
  # see https://flutter.dev/to/font-from-package

# flutter_launcher_icons configuration (no longer flutter_icons)
# Ensure this is at the ROOT level of your pubspec.yaml (no indentation before it)
flutter_launcher_icons:
  # === Android ===
  android: true # Can be true, false, or a String for the icon name (e.g., "launcher_icon")
  adaptive_icon_background: "#5A46C7" # Optional: Path to image or hex color for Android adaptive icon background
  adaptive_icon_foreground: "assets/images/app_icon_foreground.png" # Optional: Path to image for Android adaptive icon foreground

  # === iOS ===
  ios: true # Can be true or false

  # === Web ===
  # For newer versions (like ^0.14.0), web configuration is often simpler.
  # It might accept 'true', or a map for more control.
  # Let's try with a simple structure first. If it errors, consult the package docs for this version.
  web:
    generate: true
    # image_path: "assets/images/web_icon.png" # Optional: If different from global
    # background_color: "#ffffff" # Optional
    # theme_color: "#000000" # Optional

  # === Windows ===
  windows:
    generate: true
    # icon_size: 48 # Optional: Desired icon size for Windows (e.g., 48, 256)

  # === macOS ===
  macos:
    generate: true

  # === Linux ===
  # Linux often doesn't need specific generation from this tool,
  # as it uses standard .desktop files and icon themeing.
  # You can omit 'linux' or set generate to false if you manage Linux icons manually.
  # linux:
  #   generate: false

  # Global image_path (REQUIRED if not specified per platform)
  image_path: "assets/images/app_icon.png" # MAKE SURE THIS FILE EXISTS!
